import{_ as n,o as s,c as e,e as t,a,b as c,f as i}from"./app-SR6vxKHC.js";const p={},o=a("h1",{id:"java-基础数据结构",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java-基础数据结构","aria-hidden":"true"},"#"),c(" java 基础数据结构")],-1),d=i(`<h2 id="_1-优先队列-堆" tabindex="-1"><a class="header-anchor" href="#_1-优先队列-堆" aria-hidden="true">#</a> 1. 优先队列(堆)</h2><h3 id="_1-0-初始化" tabindex="-1"><a class="header-anchor" href="#_1-0-初始化" aria-hidden="true">#</a> 1.0 初始化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-1-入队列" tabindex="-1"><a class="header-anchor" href="#_1-1-入队列" aria-hidden="true">#</a> 1.1 入队列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>priorityQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-出队列" tabindex="-1"><a class="header-anchor" href="#_1-2-出队列" aria-hidden="true">#</a> 1.2 出队列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>priorityQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-demo" tabindex="-1"><a class="header-anchor" href="#_1-3-demo" aria-hidden="true">#</a> 1.3 demo</h3><iframe src="https://pl.kotl.in/tBnF-3eSf" height="220" width="600"></iframe><h2 id="_2-栈" tabindex="-1"><a class="header-anchor" href="#_2-栈" aria-hidden="true">#</a> 2. 栈</h2><h3 id="_1-0-初始化-1" tabindex="-1"><a class="header-anchor" href="#_1-0-初始化-1" aria-hidden="true">#</a> 1.0 初始化</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-1-入栈" tabindex="-1"><a class="header-anchor" href="#_1-1-入栈" aria-hidden="true">#</a> 1.1 入栈</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-出栈" tabindex="-1"><a class="header-anchor" href="#_1-2-出栈" aria-hidden="true">#</a> 1.2 出栈</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-demo-1" tabindex="-1"><a class="header-anchor" href="#_1-3-demo-1" aria-hidden="true">#</a> 1.3 demo</h3><iframe src="https://pl.kotl.in/z6KeB8t3P" height="220" width="600"></iframe>`,18);function r(l,u){return s(),e("div",null,[o,t(" more "),d])}const k=n(p,[["render",r],["__file","java基础数据结构.html.vue"]]);export{k as default};
